# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UpdateCounterStatusInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, counter_id: str=None):  # noqa: E501
        """UpdateCounterStatusInput - a model defined in Swagger

        :param status: The status of this UpdateCounterStatusInput.  # noqa: E501
        :type status: str
        :param counter_id: The counter_id of this UpdateCounterStatusInput.  # noqa: E501
        :type counter_id: str
        """
        self.swagger_types = {
            'status': str,
            'counter_id': str
        }

        self.attribute_map = {
            'status': 'status',
            'counter_id': 'counter_id'
        }
        self._status = status
        self._counter_id = counter_id

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateCounterStatusInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateCounterStatusInput of this UpdateCounterStatusInput.  # noqa: E501
        :rtype: UpdateCounterStatusInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this UpdateCounterStatusInput.

        New status of the counter  # noqa: E501

        :return: The status of this UpdateCounterStatusInput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this UpdateCounterStatusInput.

        New status of the counter  # noqa: E501

        :param status: The status of this UpdateCounterStatusInput.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def counter_id(self) -> str:
        """Gets the counter_id of this UpdateCounterStatusInput.

        ID of the counter to be updated  # noqa: E501

        :return: The counter_id of this UpdateCounterStatusInput.
        :rtype: str
        """
        return self._counter_id

    @counter_id.setter
    def counter_id(self, counter_id: str):
        """Sets the counter_id of this UpdateCounterStatusInput.

        ID of the counter to be updated  # noqa: E501

        :param counter_id: The counter_id of this UpdateCounterStatusInput.
        :type counter_id: str
        """
        if counter_id is None:
            raise ValueError("Invalid value for `counter_id`, must not be `None`")  # noqa: E501

        self._counter_id = counter_id
