# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GenerateTokenInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, service_name: str=None):  # noqa: E501
        """GenerateTokenInput - a model defined in Swagger

        :param service_name: The service_name of this GenerateTokenInput.  # noqa: E501
        :type service_name: str
        """
        self.swagger_types = {
            'service_name': str
        }

        self.attribute_map = {
            'service_name': 'service_name'
        }
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt) -> 'GenerateTokenInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GenerateTokenInput of this GenerateTokenInput.  # noqa: E501
        :rtype: GenerateTokenInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self) -> str:
        """Gets the service_name of this GenerateTokenInput.

        ID of the service for which token needs to be generated  # noqa: E501

        :return: The service_name of this GenerateTokenInput.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name: str):
        """Sets the service_name of this GenerateTokenInput.

        ID of the service for which token needs to be generated  # noqa: E501

        :param service_name: The service_name of this GenerateTokenInput.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name
