# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UpdateSystemConfigurationInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, number_of_counters: int=None, services_types: List[str]=None, services_per_counter: Dict[str, List[str]]=None, counter_status: Dict[str, str]=None, token_limit_per_counter: int=None, service_modes: List[str]=None):  # noqa: E501
        """UpdateSystemConfigurationInput - a model defined in Swagger

        :param number_of_counters: The number_of_counters of this UpdateSystemConfigurationInput.  # noqa: E501
        :type number_of_counters: int
        :param services_types: The services_types of this UpdateSystemConfigurationInput.  # noqa: E501
        :type services_types: List[str]
        :param services_per_counter: The services_per_counter of this UpdateSystemConfigurationInput.  # noqa: E501
        :type services_per_counter: Dict[str, List[str]]
        :param counter_status: The counter_status of this UpdateSystemConfigurationInput.  # noqa: E501
        :type counter_status: Dict[str, str]
        :param token_limit_per_counter: The token_limit_per_counter of this UpdateSystemConfigurationInput.  # noqa: E501
        :type token_limit_per_counter: int
        :param service_modes: The service_modes of this UpdateSystemConfigurationInput.  # noqa: E501
        :type service_modes: List[str]
        """
        self.swagger_types = {
            'number_of_counters': int,
            'services_types': List[str],
            'services_per_counter': Dict[str, List[str]],
            'counter_status': Dict[str, str],
            'token_limit_per_counter': int,
            'service_modes': List[str]
        }

        self.attribute_map = {
            'number_of_counters': 'number_of_counters',
            'services_types': 'services_types',
            'services_per_counter': 'services_per_counter',
            'counter_status': 'counter_status',
            'token_limit_per_counter': 'token_limit_per_counter',
            'service_modes': 'service_modes'
        }
        self._number_of_counters = number_of_counters
        self._services_types = services_types
        self._services_per_counter = services_per_counter
        self._counter_status = counter_status
        self._token_limit_per_counter = token_limit_per_counter
        self._service_modes = service_modes

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateSystemConfigurationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateSystemConfigurationInput of this UpdateSystemConfigurationInput.  # noqa: E501
        :rtype: UpdateSystemConfigurationInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_counters(self) -> int:
        """Gets the number_of_counters of this UpdateSystemConfigurationInput.

        Number of counters available in the system  # noqa: E501

        :return: The number_of_counters of this UpdateSystemConfigurationInput.
        :rtype: int
        """
        return self._number_of_counters

    @number_of_counters.setter
    def number_of_counters(self, number_of_counters: int):
        """Sets the number_of_counters of this UpdateSystemConfigurationInput.

        Number of counters available in the system  # noqa: E501

        :param number_of_counters: The number_of_counters of this UpdateSystemConfigurationInput.
        :type number_of_counters: int
        """
        if number_of_counters is None:
            raise ValueError("Invalid value for `number_of_counters`, must not be `None`")  # noqa: E501

        self._number_of_counters = number_of_counters

    @property
    def services_types(self) -> List[str]:
        """Gets the services_types of this UpdateSystemConfigurationInput.

        List of service types available in the system  # noqa: E501

        :return: The services_types of this UpdateSystemConfigurationInput.
        :rtype: List[str]
        """
        return self._services_types

    @services_types.setter
    def services_types(self, services_types: List[str]):
        """Sets the services_types of this UpdateSystemConfigurationInput.

        List of service types available in the system  # noqa: E501

        :param services_types: The services_types of this UpdateSystemConfigurationInput.
        :type services_types: List[str]
        """
        if services_types is None:
            raise ValueError("Invalid value for `services_types`, must not be `None`")  # noqa: E501

        self._services_types = services_types

    @property
    def services_per_counter(self) -> Dict[str, List[str]]:
        """Gets the services_per_counter of this UpdateSystemConfigurationInput.

        Services assigned to each counter  # noqa: E501

        :return: The services_per_counter of this UpdateSystemConfigurationInput.
        :rtype: Dict[str, List[str]]
        """
        return self._services_per_counter

    @services_per_counter.setter
    def services_per_counter(self, services_per_counter: Dict[str, List[str]]):
        """Sets the services_per_counter of this UpdateSystemConfigurationInput.

        Services assigned to each counter  # noqa: E501

        :param services_per_counter: The services_per_counter of this UpdateSystemConfigurationInput.
        :type services_per_counter: Dict[str, List[str]]
        """
        if services_per_counter is None:
            raise ValueError("Invalid value for `services_per_counter`, must not be `None`")  # noqa: E501

        self._services_per_counter = services_per_counter

    @property
    def counter_status(self) -> Dict[str, str]:
        """Gets the counter_status of this UpdateSystemConfigurationInput.

        Status of each counter  # noqa: E501

        :return: The counter_status of this UpdateSystemConfigurationInput.
        :rtype: Dict[str, str]
        """
        return self._counter_status

    @counter_status.setter
    def counter_status(self, counter_status: Dict[str, str]):
        """Sets the counter_status of this UpdateSystemConfigurationInput.

        Status of each counter  # noqa: E501

        :param counter_status: The counter_status of this UpdateSystemConfigurationInput.
        :type counter_status: Dict[str, str]
        """
        if counter_status is None:
            raise ValueError("Invalid value for `counter_status`, must not be `None`")  # noqa: E501

        self._counter_status = counter_status

    @property
    def token_limit_per_counter(self) -> int:
        """Gets the token_limit_per_counter of this UpdateSystemConfigurationInput.

        Maximum token limit per counter  # noqa: E501

        :return: The token_limit_per_counter of this UpdateSystemConfigurationInput.
        :rtype: int
        """
        return self._token_limit_per_counter

    @token_limit_per_counter.setter
    def token_limit_per_counter(self, token_limit_per_counter: int):
        """Sets the token_limit_per_counter of this UpdateSystemConfigurationInput.

        Maximum token limit per counter  # noqa: E501

        :param token_limit_per_counter: The token_limit_per_counter of this UpdateSystemConfigurationInput.
        :type token_limit_per_counter: int
        """
        if token_limit_per_counter is None:
            raise ValueError("Invalid value for `token_limit_per_counter`, must not be `None`")  # noqa: E501

        self._token_limit_per_counter = token_limit_per_counter

    @property
    def service_modes(self) -> List[str]:
        """Gets the service_modes of this UpdateSystemConfigurationInput.

        Modes of service (e.g., setup mode, run mode, offline)  # noqa: E501

        :return: The service_modes of this UpdateSystemConfigurationInput.
        :rtype: List[str]
        """
        return self._service_modes

    @service_modes.setter
    def service_modes(self, service_modes: List[str]):
        """Sets the service_modes of this UpdateSystemConfigurationInput.

        Modes of service (e.g., setup mode, run mode, offline)  # noqa: E501

        :param service_modes: The service_modes of this UpdateSystemConfigurationInput.
        :type service_modes: List[str]
        """
        if service_modes is None:
            raise ValueError("Invalid value for `service_modes`, must not be `None`")  # noqa: E501

        self._service_modes = service_modes
