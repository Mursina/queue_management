# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ChooseServiceModeInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, mode: str=None):  # noqa: E501
        """ChooseServiceModeInput - a model defined in Swagger

        :param mode: The mode of this ChooseServiceModeInput.  # noqa: E501
        :type mode: str
        """
        self.swagger_types = {
            'mode': str
        }

        self.attribute_map = {
            'mode': 'mode'
        }
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt) -> 'ChooseServiceModeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChooseServiceModeInput of this ChooseServiceModeInput.  # noqa: E501
        :rtype: ChooseServiceModeInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self) -> str:
        """Gets the mode of this ChooseServiceModeInput.

        The selected mode of the service  # noqa: E501

        :return: The mode of this ChooseServiceModeInput.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this ChooseServiceModeInput.

        The selected mode of the service  # noqa: E501

        :param mode: The mode of this ChooseServiceModeInput.
        :type mode: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode
